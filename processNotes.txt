Process Notes
===============
In this study, we'll make a single page express web page with an integrated counting app to 
demonstrate strucutre and functionality.


PHASE 1: Project Setup
/////////////////////////

    STEP 1: Create a project folder:
    ================================
        o   "express-app"


    STEP 2: Install the express framework in your project folder in gitbash:
    ========================================================================
        o   "npm install express"

            o   When you do this, you will get a node_modules folder and a pack-lock.json file (you dont touch these)


    STEP 3: Create a server.js file for your project server:
    ========================================================
        o   "server.js"

            o   It is best to do this now because in the next step when you initialize npm, it will ask you which
                entry point you want to use for your server. However, you can add this file after as well but it 
                must be the same as what is listed in the "main" property in your package.json file.


    STEP 4: Initialize npm in your project folder in gitbash:
    ==========================================================
        o   "npm init" 


    STEP 5: Add dependencies (if any)
    =================================
        o   In this example we dont have any.


    STEP 6: Add a .gitginore file and include your node_modules folder so it will not be uploaded to github (if applicable):
    ========================================================================================================================
        o   .gitgignore
            node_modules 


PHASE 2: Build your basic server in server.js:
////////////////////////////////////////////////

    STEP 7: In your app, first load any modules you will need for the project:
    ==========================================================================
        o   In the case of this basic application, we dont need to load any modules or middleware other than the built-in middleware in express.
        
        STEP 7.1: Load the built-in express module and initilaize it
        ============================================================

            const express = require('express');       <== imports the express module to your project
            const app = express();                    <== intilizes express and stores as "app" which you will then use for your routes and commands.

    
    STEP 8: Setup a static file server that serves assets from a "public" folder:
    =============================================================================

        app.use(express.static('public'));


    STEP 9: Create a "public" folder in your project folder.
    ========================================================
        
        "public"


    OPTIONAL: Create a basic GET endpoint to test your server
    =========================================================
        o   In this case, create a basic GET endpoint to test whether or not ytour server is working correctly before
            moving on to the business logic of your app.  This makes sure you have a solid base to work from.

                    app.get('/', function(req, res) {
                        console.log('This is a working test response... ')
                    });


    STEP 10: Create a basic "app.listen" function to listen for requests made to this server:
    =========================================================================================

                    app.listen(3000, function() {
                        console.log(`Your app is listening on port 3000...`);
                    }); 


PHASE 3: Add HTML and CSS files to your project
===============================================

    STEP 11: Add HTML and CSS (if any) to your "public" folder
    ===========================================================
    o   In your publice folder, create an index.html main page.
    o   If you have stylesheets, create a folder "stylesheets" and place your css files in there.
    o   Because the files are placed in the "public" folder, there is no need to create seperate routes for your page(s).



PHASE 4: Add the buisness logic to your application
===================================================
    o   In this app, the objective is to create a simple process wherein each time the client presses the 
        "Click me!" button, the counter will increment by 1.

    STEP 12: Add a "count" variable to store the count from your app.
    =================================================================
    o   To keep the app simple, we'll store the count on the server.

    STEP 13: Add logic in client.js for the counter
    ===============================================
    
            'use strict';

            function getCount() {                                                   // when getCount runs...
                $.get('/the-count', function(data) {                                // "$.get() will load the data from the server using an HTTP GET request using the route "/the-count"
                $('.js-current-count').text(data.count);                          // and the current count will show the current count.
                });
            }

            function buttonPress() {                                                 // when button press occurs...
                $('body').on('click', '.js-button', function() {                     // on click of the button with the class .js-button, run getCount.
                    getCount();
                });
            }

            function setupEventListeners() {                                        //  Listen for button press (in this case, listening for when the client presses the increment button)
                buttonPress();
            }

            function initialize() {                                                 // setup event listeners...
                setupEventListeners();
            }

            $(initialize);                                                          // App initilizes...
    

    STEP 14: IN your server.js file, create a route for your increment counter:
    ===========================================================================

            app.get("/the-count", (req, res) => {                                               /* when the user presses the button (i.e. sends a request after pressing the button*/
                console.log('incrementing the count');
                theCount += 1;                                                                    /* increment the counter by 1*/
                console.log(`the count is ${theCount}`);
                res.json({count: theCount});                                                      /* and the response will be a json object with the new count amount.*/
            });




